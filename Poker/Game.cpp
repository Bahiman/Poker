#include "Game.h"

void Game::start()
{
	addPlayer();
	for (int i = 0; i < 3; i++)
	{
		startBettingRound(i);
	}
#ifndef DEBUG
	std::cout << m_pot << " is the pot " << std::endl;
	std::cout << "And the balances are ";
	for (auto& k : m_players)
	{
		std::cout << k.getChips() << " ,";
	}
#endif // DEBUG

	
}

void Game::addPlayer()
{
count:
	std::cout << "How many players will play? (2-6)" << std::endl;
	std::cin >> m_playerCount;
	if (m_playerCount < 2 || m_playerCount > 6)
	{
		std::cout << "Invalid number of players!" << std::endl;
		goto count;
	}
	for (int i = 0; i < m_playerCount; i++)
	{
		std::string name;
		std::cout << "Enter player " << i + 1 << "'s name: ";
		std::cin >> name;
		m_players.emplace_back(m_deck[cardCounter], m_deck[cardCounter + 1], std::move(name));
		cardCounter += 2;
	}

	std::cout << "Please note that the cards will be revealed in the order of the users so don't look at the screen when it ain't ur turn(Press enter to continue)" << std::endl;

	std::cin.get();

	for (int i = 0; i < m_playerCount; i++)
	{
		std::cout << "Player " << i + 1 << "'s cards: " << std::endl;
		std::cout << *m_players[i].getCards() << std::endl;
		std::cin.get();
		std::cout << "///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n///////////////////////////////////////////////////\n";
	}

	m_deck.size -= cardCounter - 1;
}

int Game::allBetsAreSame()
{
	uint32_t bet = m_players[0].getBet();
	for (auto& k : m_players)
	{
		if (k.getBet() != bet) return -1;
		else bet = k.getBet();
	}
	if (bet == 0) return 0;
	else return 1;
}

void Game::startBettingRound(uint32_t gameCounter)
{
	if (gameCounter == 0)
	{
		Card flop1 = m_deck[cardCounter];
		Card flop2 = m_deck[++cardCounter];
		Card flop3 = m_deck[++cardCounter];
		std::cout << "And the flop is: " << *flop1.getStringRepresentation() << ", " << *flop2.getStringRepresentation() << ", " << *flop3.getStringRepresentation();
		std::cout << "Betting round started!" << std::endl;
		bet();
		// we now gotta give a choice to each of the players
	}
	else if (gameCounter == 1)
	{
		// reveal the card
		Card turn = m_deck[++cardCounter];
		std::cout << "And the turn is: " << *turn.getStringRepresentation() << std::endl;
		std::cout << "Betting round started!" << std::endl;
		bet();
	}
	else
	{
		Card river = m_deck[++cardCounter];
		std::cout << "And the river is: " << *river.getStringRepresentation() << std::endl;
		std::cout << "Betting round started!" << std::endl;
		bet();
	}
}

bool Game::everyoneFolded()
{
	bool returnValue = true;

	for (auto& k : m_players)
	{
		// check if the k has folded
		if (!k.isFolded())
		{
			returnValue = false;
			break;
		}
	}

	return returnValue;
}

Game::Game() : m_pot(0), cardCounter(0), roundBet(0), currentBet(0)
{
	
}

void Game::bet()
{
	for (auto& k : m_players)
	{
		if (!k.isFolded())
		{
		bett:
			std::cout << "It is " << k.getUsername() << "'s turn!" << std::endl;
			std::cout << "Do you want to fold, call or raise? (f/c/r)" << std::endl;
			char choice;
			std::cin >> choice;
			if (choice == 'f')
			{
				k.fold();
			}
			else if (choice == 'c')
			{
				if (k.getChips() >= currentBet)
				{
					k.setChips(k.getChips() - roundBet);
					k.setBet(currentBet);
					m_pot += roundBet;
					roundBet = 0;
				}
				else
				{
					std::cout << "You don't have enough chips to call! Fold!" << std::endl;
					goto bett;
				}
			}
			else if (choice == 'r')
			{
				std::cout << "Enter the amount that u wanna bet(it has to be double the current bet): " << std::endl;
				uint32_t bet; 
				std::cin >> bet;
				if (currentBet * 2 <= bet|| bet == 0)
				{
					if (bet >= k.getChips())
					{
						std::cout << "You don't have enough chips to raise! Fold!" << std::endl;
						goto bett;
					}
					else
					{
						k.setChips(k.getChips() - bet);
						roundBet = bet;
						m_pot += roundBet;
						currentBet = bet;
						k.setBet(currentBet);
					}
				}
				else       
				{
					std::cout << "Invalid bet! Please Fold!" << std::endl;
					goto bett;
				}
			}
		}
	}	
		
	if (allBetsAreSame() == 0 || allBetsAreSame() == 1) std::cout << "Betting round ended!" << std::endl;
	else
	{
		bet();
	}
}

// ad asd